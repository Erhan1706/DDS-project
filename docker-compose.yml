version: "3.9"

#docker swarm init
#docker compose build
#docker stack deploy -c docker-compose.yml mystack #i did apply
##docker stack rm mystack #to stop services

services:

  gateway:
    image: nginx:1.25-bookworm
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - order-service
      - stock-service
      - payment-service
    networks:
      - app_network
    ports:
      - "8000:80"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  order-service:
    build: ./order
    image: order:latest
    environment:
      - GATEWAY_URL=http://gateway:80
    env_file:
      - env/order_redis.env
    depends_on:
      - order-postgres
      - kafka
    networks:
      - app_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 5s

  order-redis:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    networks:
      - app_network

  stock-service:
    build: ./stock
    image: stock:latest
    env_file:
      - env/stock_redis.env
    depends_on:
      - stock-postgres
      - kafka
    networks:
      - app_network
    deploy:
      replicas: 2
    volumes:
      - ./stock/app.py:/home/flask-app/app.py

  payment-service:
    build: ./payment
    image: user:latest
    env_file:
      - env/payment_redis.env
    depends_on:
      - payment-postgres
      - kafka
    networks:
      - app_network
    deploy:
      replicas: 2
    volumes:
      - ./payment/app.py:/home/flask-app/app.py

  order-postgres:
    image: postgres:15.2
    user: postgres
    environment:
      - POSTGRES_DB=order-db
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - app_network

  stock-postgres:
    image: postgres:15.2
    user: postgres
    environment:
      - POSTGRES_DB=stock_db
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - app_network

  payment-postgres:
    image: postgres:15.2
    user: postgres
    environment:
      - POSTGRES_DB=payment_db
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - app_network

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_CONFIG_SERVER_MODE: "False"
    networks:
      - app_network
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json:ro
      - ./config_local.py:/pgadmin4/config_local.py:ro
    ports:
      - "5050:80"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - "9093:9093"
    networks:
      - app_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - app_network
    ports:
      - "8080:8080"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

networks:
  app_network:
    driver: overlay

volumes:
  pgadmin:
