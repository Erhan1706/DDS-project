version: "3.9"

#docker swarm init
#docker compose pull
#docker compose build
#docker stack deploy -c docker-compose.yml mystack
##docker stack rm mystack #to stop services

x-restart-policy: &default-restart-policy
  condition: any
  delay: 5s
  window: 120s

services:

  gateway:
    image: nginx:1.25-bookworm
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - order-service
      - stock-service
      - payment-service
    networks:
      - app_network
    ports:
      - "8000:80"
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1
      placement:
        constraints: [node.role == manager]

  order-service:
    build: ./order
    image: order:latest
    command: bash ./wait-for-kafka.sh
    environment:
      - GATEWAY_URL=http://gateway:80
    env_file:
      - env/order_redis.env
    depends_on:
      - order-postgres
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
#    volumes:
#      - ./order/orchestrator.py:/home/flask-app/orchestrator.py # reload changes for development
#      - ./order/routes.py:/home/flask-app/routes.py
#      - ./order/kafka_utils.py:/home/flask-app/kafka_utils.py
#    command: bash ./wait-for-kafka.sh
#
#
#  order-service-2:
#    build: ./order
#    image: order:latest
#    environment:
#      - GATEWAY_URL=http://gateway:80
#    ports:
#      - "9002:5000"
#      - "5679:5679"
#    env_file:
#      - env/order_redis.env
#    depends_on:
#      - order-postgres
#      - kafka
#    networks:
#      - app_network
#    volumes:
#      - ./order/orchestrator.py:/home/flask-app/orchestrator.py
#      - ./order/routes.py:/home/flask-app/routes.py
#      - ./order/kafka_utils.py:/home/flask-app/kafka_utils.py
#    command: bash ./start-for-replica-container.sh

  order-redis:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  stock-service:
    build: ./stock
    image: stock:latest
    env_file:
      - env/stock_redis.env
    depends_on:
      - stock-postgres
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1
    volumes:
      - ./stock/app.py:/home/flask-app/app.py

  payment-service:
    build: ./payment
    image: user:latest
    env_file:
      - env/payment_redis.env
    depends_on:
      - payment-postgres
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1
    volumes:
      - ./payment/app.py:/home/flask-app/app.py

  order-postgres:
    image: postgres:15.2
    user: postgres
    environment:
      - POSTGRES_DB=order-db
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  stock-postgres:
    image: postgres:15.2
    user: postgres
    environment:
      - POSTGRES_DB=stock_db
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  payment-postgres:
    image: postgres:15.2
    user: postgres
    environment:
      - POSTGRES_DB=payment_db
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_CONFIG_SERVER_MODE: "False"
    networks:
      - app_network
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json:ro
      - ./config_local.py:/pgadmin4/config_local.py:ro
    ports:
      - "5050:80"
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1
      placement:
        constraints: [node.role == manager]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1


  kafka-init:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - app_network
    command: >
      bash -c '
        echo "Waiting for Kafka brokers...";
        for broker in kafka-1:9091 kafka-2:9092 kafka-3:9093; do
          until nc -z $(echo $broker | cut -d":" -f1) $(echo $broker | cut -d":" -f2); do
            echo "Waiting for broker $broker...";
            sleep 1;
          done;
        done;
        echo "All Kafka brokers are ready. Creating topics...";
        for topic in compensate_payment_details compensate_stock_details payment_details_failure payment_details_success stock_details_failure stock_details_success verify_payment_details verify_stock_details; do
          kafka-topics --create --if-not-exists --bootstrap-server kafka-1:9094,kafka-2:9092,kafka-3:9093 --replication-factor 3 --partitions 8 --topic $topic;
        done;
        echo "All topics created. Init container exiting.";
      '
    deploy:
      restart_policy:
        condition: none

  kafka-1:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9091,PLAINTEXT_HOST://localhost:19091
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_NUM_PARTITIONS=8
    ports:
      - "9091:9091"
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  kafka-2:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:19092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_NUM_PARTITIONS=8
    ports:
      - "9092:9092"
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  kafka-3:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9093,PLAINTEXT_HOST://localhost:19093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_NUM_PARTITIONS=8
    ports:
      - "9093:9093"
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9094,kafka-2:9092,kafka-3:9093
    networks:
      - app_network
    ports:
      - "8080:8080"
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1
      placement:
        constraints: [node.role == manager]

networks:
  app_network:
    driver: overlay

volumes:
  pgadmin:
