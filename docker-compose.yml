version: "3.9"

#docker swarm init
#docker compose build
#docker stack deploy -c docker-compose.yml mystack
##docker stack rm mystack #to stop services

x-restart-policy: &default-restart-policy
  condition: on-failure
  delay: 60s
  max_attempts: 5
  window: 120s

services:

  gateway:
    image: nginx:1.25-bookworm
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
      - ./wait-for-services.sh:/wait-for-services.sh
    entrypoint: ["/bin/bash", "/wait-for-services.sh"]
    depends_on:
      - order-service
      - stock-service
      - payment-service
    networks:
      - app_network
    ports:
      - "8000:80"
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1
      placement:
        constraints: [node.role == manager]

  order-service:
    build: ./order
    image: order:latest
    command: bash ./wait-for-kafka.sh
    environment:
      - GATEWAY_URL=http://gateway:80
    env_file:
      - env/order_redis.env
    depends_on:
      - order-pgpool
      - kafka
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 4
      update_config:
        parallelism: 1
        delay: 5s
#    volumes:
#      - ./order/orchestrator.py:/home/flask-app/orchestrator.py # reload changes for development
#      - ./order/routes.py:/home/flask-app/routes.py
#      - ./order/kafka_utils.py:/home/flask-app/kafka_utils.py
#    command: bash ./wait-for-kafka.sh
#
#
#  order-service-2:
#    build: ./order
#    image: order:latest
#    environment:
#      - GATEWAY_URL=http://gateway:80
#    ports:
#      - "9002:5000"
#      - "5679:5679"
#    env_file:
#      - env/order_redis.env
#    depends_on:
#      - order-postgres
#      - kafka
#    networks:
#      - app_network
#    volumes:
#      - ./order/orchestrator.py:/home/flask-app/orchestrator.py
#      - ./order/routes.py:/home/flask-app/routes.py
#      - ./order/kafka_utils.py:/home/flask-app/kafka_utils.py
#    command: bash ./start-for-replica-container.sh

  order-redis:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 512mb
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  stock-service:
    build: ./stock
    image: stock:latest
    env_file:
      - env/stock_redis.env
    depends_on:
      - stock-pgpool
      - kafka
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 4
    volumes:
      - ./stock/app.py:/home/flask-app/app.py

  payment-service:
    build: ./payment
    image: user:latest
    env_file:
      - env/payment_redis.env
    depends_on:
      - payment-pgpool
      - kafka
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 4

  order-pg-0:
    image: docker.io/bitnami/postgresql-repmgr:latest
    ports:
      - "5434:5432"
    volumes:
      - order_pg0_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=order-db
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=order-pg-0
      - REPMGR_PARTNER_NODES=order-pg-0,order-pg-1
      - REPMGR_NODE_NAME=order-pg-0
      - REPMGR_NODE_NETWORK_NAME=order-pg-0
      - REPMGR_USERNAME=repmgr
      - REPMGR_PASSWORD=repmgrpassword
    networks:
      - app_network
    
  order-pg-1:
    image: docker.io/bitnami/postgresql-repmgr:latest
    ports:
      - "5435:5432"
    volumes:
      - order_pg1_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=order-db
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=order-pg-0
      - REPMGR_PARTNER_NODES=order-pg-0,order-pg-1
      - REPMGR_NODE_NAME=order-pg-1
      - REPMGR_NODE_NETWORK_NAME=order-pg-1
      - REPMGR_USERNAME=repmgr
      - REPMGR_PASSWORD=repmgrpassword
    networks:
      - app_network
    depends_on:
      - order-pg-0

  order-pgpool:
    image: docker.io/bitnami/pgpool:4
    ports:
      - 5436:5432
    environment:
      - PGPOOL_BACKEND_NODES=0:order-pg-0:5432,1:order-pg-1:5432
      - PGPOOL_SR_CHECK_USER=repmgr
      - PGPOOL_SR_CHECK_PASSWORD=repmgrpassword
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=postgres
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
      - PGPOOL_POSTGRES_CUSTOM_USERS=customuser
      - PGPOOL_POSTGRES_CUSTOM_PASSWORDS=custompassword
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_USER_CONF_FILE=/config/myconf.conf
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./pgpool/pgpool.conf:/config/myconf.conf
    depends_on:
      - order-pg-0
      - order-pg-1
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  ####
  stock-pg-0:
    image: docker.io/bitnami/postgresql-repmgr:latest
    ports:
      - "5437:5432"
    volumes:
      - stock_pg0_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=stock_db
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=stock-pg-0
      - REPMGR_PARTNER_NODES=stock-pg-0,stock-pg-1
      - REPMGR_NODE_NAME=stock-pg-0
      - REPMGR_NODE_NETWORK_NAME=stock-pg-0
      - REPMGR_USERNAME=repmgr
      - REPMGR_PASSWORD=repmgrpassword
    networks:
      - app_network
    
  stock-pg-1:
    image: docker.io/bitnami/postgresql-repmgr:latest
    ports:
      - "5438:5432"
    volumes:
      - stock_pg1_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=stock_db
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=stock-pg-0
      - REPMGR_PARTNER_NODES=stock-pg-0,stock-pg-1
      - REPMGR_NODE_NAME=stock-pg-1
      - REPMGR_NODE_NETWORK_NAME=stock-pg-1
      - REPMGR_USERNAME=repmgr
      - REPMGR_PASSWORD=repmgrpassword
    networks:
      - app_network
    depends_on:
      - stock-pg-0

  stock-pgpool:
    image: docker.io/bitnami/pgpool:4
    ports:
      - 5439:5432
    environment:
      - PGPOOL_BACKEND_NODES=0:stock-pg-0:5432,1:stock-pg-1:5432
      - PGPOOL_SR_CHECK_USER=repmgr
      - PGPOOL_SR_CHECK_PASSWORD=repmgrpassword
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=postgres
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
      - PGPOOL_POSTGRES_CUSTOM_USERS=customuser
      - PGPOOL_POSTGRES_CUSTOM_PASSWORDS=custompassword
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_USER_CONF_FILE=/config/myconf.conf
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./pgpool/pgpool.conf:/config/myconf.conf
    depends_on:
      - stock-pg-0
      - stock-pg-1
    networks:
      - app_network

  ####
  payment-pg-0:
    image: docker.io/bitnami/postgresql-repmgr:latest
    ports:
      - "5440:5432"
    volumes:
      - payment_pg0_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=payment_db
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=payment-pg-0
      - REPMGR_PARTNER_NODES=payment-pg-0,payment-pg-1
      - REPMGR_NODE_NAME=payment-pg-0
      - REPMGR_NODE_NETWORK_NAME=payment-pg-0
      - REPMGR_USERNAME=repmgr
      - REPMGR_PASSWORD=repmgrpassword
    networks:
      - app_network
    
  payment-pg-1:
    image: docker.io/bitnami/postgresql-repmgr:latest
    ports:
      - "5441:5432"
    volumes:
      - payment_pg1_data:/bitnami/postgresql
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_USERNAME=customuser
      - POSTGRESQL_PASSWORD=custompassword
      - POSTGRESQL_DATABASE=payment_db
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=payment-pg-0
      - REPMGR_PARTNER_NODES=payment-pg-0,payment-pg-1
      - REPMGR_NODE_NAME=payment-pg-1
      - REPMGR_NODE_NETWORK_NAME=payment-pg-1
      - REPMGR_USERNAME=repmgr
      - REPMGR_PASSWORD=repmgrpassword
    networks:
      - app_network
    depends_on:
      - payment-pg-0

  payment-pgpool:
    image: docker.io/bitnami/pgpool:4
    ports:
      - 5442:5432
    environment:
      - PGPOOL_BACKEND_NODES=0:payment-pg-0:5432,1:payment-pg-1:5432
      - PGPOOL_SR_CHECK_USER=repmgr
      - PGPOOL_SR_CHECK_PASSWORD=repmgrpassword
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=postgres
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
      - PGPOOL_POSTGRES_CUSTOM_USERS=customuser
      - PGPOOL_POSTGRES_CUSTOM_PASSWORDS=custompassword
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_USER_CONF_FILE=/config/myconf.conf
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./pgpool/pgpool.conf:/config/myconf.conf
    depends_on:
      - payment-pg-0
      - payment-pg-1
    networks:
      - app_network

  # pgAdmin (access with localhost:5050 in browser)
  #pgadmin:
  #  container_name: pgadmin4_container
  #  image: dpage/pgadmin4
  #  environment:
  #    PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #    PGADMIN_DEFAULT_PASSWORD: root
  #    PGADMIN_CONFIG_SERVER_MODE: "False"
  #  ports:
  #    - "5050:80"
  #  networks:
  #    - app_network
  #  volumes:
  #    - pgadmin:/var/lib/pgadmin
  #    - ./servers.json:/pgadmin4/servers.json:ro
  #    - ./config_local.py:/pgadmin4/config_local.py:ro

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_NUM_PARTITIONS=8
    ports:
      - "9093:9093"
    networks:
      - app_network
    deploy:
      restart_policy:
        <<: *default-restart-policy
      replicas: 1

  #kafka-ui:
  #  image: provectuslabs/kafka-ui:latest
  #  container_name: kafka-ui
  #  depends_on:
  #    - kafka
  #  environment:
  #    - KAFKA_CLUSTERS_0_NAME=local
  #    - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
  #  networks:
  #    - app_network
  #  ports:
  #    - "8080:8080"
  #  deploy:
  #    restart_policy:
  #      <<: *default-restart-policy
  #    replicas: 1
  #    placement:
  #      constraints: [node.role == manager]

networks:
  app_network:
    driver: overlay
    attachable: true

volumes:
  pgadmin:
  order_pg0_data:
  order_pg1_data:
  stock_pg0_data:
  stock_pg1_data:
  payment_pg0_data:
  payment_pg1_data:
